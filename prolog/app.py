from pyswip import Prolog

prolog = Prolog()

prolog.assertz("hombre(arthur)")
prolog.assertz("hombre(bill)")
prolog.assertz("hombre(louis)")
prolog.assertz("hombre(teddy)")
prolog.assertz("hombre(percy)")
prolog.assertz("hombre(george)")
prolog.assertz("hombre(fred)")
prolog.assertz("hombre(harry)")
prolog.assertz("hombre(james)")
prolog.assertz("hombre(albus)")
prolog.assertz("hombre(ron)")
prolog.assertz("hombre(hugo)")
prolog.assertz("mujer(molly)")
prolog.assertz("mujer(fleur)")
prolog.assertz("mujer(victoire)")
prolog.assertz("mujer(dominique)")
prolog.assertz("mujer(audrey)")
prolog.assertz("mujer(lucy)")
prolog.assertz("mujer(molly)")
prolog.assertz("mujer(angelina)")
prolog.assertz("mujer(roxanne)")
prolog.assertz("mujer(ginny)")
prolog.assertz("mujer(lily)")
prolog.assertz("mujer(hermione)")
prolog.assertz("mujer(rose)")
prolog.assertz("progenitor(molly,bill)")
prolog.assertz("progenitor(molly,percy)")
prolog.assertz("progenitor(molly,george)")
prolog.assertz("progenitor(molly,ginny)")
prolog.assertz("progenitor(molly,ron)")
prolog.assertz("progenitor(arthur,bill)")
prolog.assertz("progenitor(arthur,percy)")
prolog.assertz("progenitor(arthur,george)")
prolog.assertz("progenitor(arthur,ginny)")
prolog.assertz("progenitor(arthur,ron)")
prolog.assertz("progenitor(bill,victoire)")
prolog.assertz("progenitor(bill,dominique)")
prolog.assertz("progenitor(bill,louis)")
prolog.assertz("progenitor(fleur,victoire)")
prolog.assertz("progenitor(fleur,dominique)")
prolog.assertz("progenitor(fleur,louis)")
prolog.assertz("progenitor(percy,lucy)")
prolog.assertz("progenitor(percy,molly)")
prolog.assertz("progenitor(audrey,lucy)")
prolog.assertz("progenitor(audrey,molly)")
prolog.assertz("progenitor(george,fred)")
prolog.assertz("progenitor(george,roxanne)")
prolog.assertz("progenitor(angelina,fred)")
prolog.assertz("progenitor(angelina,roxanne)")
prolog.assertz("progenitor(ginny,james)")
prolog.assertz("progenitor(ginny,lily)")
prolog.assertz("progenitor(ginny,albus)")
prolog.assertz("progenitor(harry,james)")
prolog.assertz("progenitor(harry,lily)")
prolog.assertz("progenitor(harry,albus)")
prolog.assertz("progenitor(ron,hugo)")
prolog.assertz("progenitor(ron,rose)")
prolog.assertz("progenitor(hermione,hugo)")
prolog.assertz("progenitor(hermione,rose)")
prolog.assertz("pareja(arthur,molly)")
prolog.assertz("pareja(molly,arthur)")
prolog.assertz("pareja(bill,fleur)")
prolog.assertz("pareja(fleur,bill)")
prolog.assertz("pareja(percy,audrey)")
prolog.assertz("pareja(audrey,percy)")
prolog.assertz("pareja(george,angelina)")
prolog.assertz("pareja(angelina,george)")
prolog.assertz("pareja(ginny,harry)")
prolog.assertz("pareja(harry,ginny)")
prolog.assertz("pareja(ron,hermione)")
prolog.assertz("pareja(hermione,ron)")
prolog.assertz("pareja(victoire,teddy)")
prolog.assertz("pareja(teddy,victoire)")
prolog.assertz("padre(X,Y):-hombre(X),progenitor(X,Y)")
prolog.assertz("madre(X,Y):-mujer(X),progenitor(X,Y)")
prolog.assertz("hermanos(X,Y):-progenitor(Z,X),progenitor(Z,Y), not(X==Y)")
prolog.assertz("hermano(X,Y):-hombre(X),hermanos(X,Y)")
prolog.assertz("hermana(X,Y):-mujer(X),hermanos(X,Y)")
prolog.assertz("esposo(X,Y):-pareja(X,Y),hombre(X)")
prolog.assertz("esposa(X,Y):-pareja(X,Y),mujer(X)")
prolog.assertz("suegro(X,Y):-padre(X,Z),pareja(Y,Z)")
prolog.assertz("suegra(X,Y):-madre(X,Z),esposos(Y,Z)")
prolog.assertz("yerno(X,Y):-suegro(Y,X);suegra(Y,X),hombre(X)")
prolog.assertz("nuera(X,Y):-suegro(Y,X);suegra(Y,X),mujer(X)")
prolog.assertz("cuñados(X,Y):-((pareja(X,Z),hermanos(Z,Y));(pareja(Y,Z),hermanos(Z,X)))")
prolog.assertz("cuñado(X,Y):-cuñados(X,Y),hombre(X)")
prolog.assertz("cuñada(X,Y):-cuñados(X,Y),mujer(X)")
prolog.assertz("abuelo(X,Y):-progenitor(Z,Y),padre(X,Z)")
prolog.assertz("abuela(X,Y):-progenitor(Z,Y),madre(X,Z)")
prolog.assertz("nieto(X,Y):-progenitor(Y,Z),progenitor(Z,X),hombre(X)")
prolog.assertz("nieta(X,Y):-progenitor(Y,Z),progenitor(Z,X),mujer(X)")
prolog.assertz("tio(X,Y):-progenitor(Z,Y),(hermano(X,Z);cuñado(X,Z))")
prolog.assertz("tia(X,Y):-progenitor(Z,Y),(hermana(X,Z);cuñada(X,Z))")
prolog.assertz("primo(X,Y):-progenitor(Z,X),progenitor(W,Y),hermanos(Z,W),hombre(X)")
prolog.assertz("prima(X,Y):-progenitor(Z,X),progenitor(W,Y),hermanos(Z,W),mujer(X)")


print(len(list(prolog.query("abuelo(arthur,albus)"))) != 0)
print(list(prolog.query("abuelo(arthur, X)")))
print(len(list(prolog.query("padre(arthur, harry)"))) != 0)
print(len(list(prolog.query("padre(arthur, ginny)"))) != 0)
print(len(list(prolog.query("abuelo(arthur, victoire)"))) != 0)
print(len(list(prolog.query("nieta(victoire, molly)"))) != 0)
print(len(list(prolog.query("cuñado(harry, bill)"))) != 0)
